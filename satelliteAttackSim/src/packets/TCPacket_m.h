//
// Generated file, do not edit! Created by opp_msgtool 6.1 from packets/TCPacket.msg.
//

#ifndef __TCPACKET_M_H
#define __TCPACKET_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0601
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class TC_Packet;
/**
 * Class generated from <tt>packets/TCPacket.msg:15</tt> by opp_msgtool.
 * <pre>
 * //
 * // This program is free software: you can redistribute it and/or modify
 * // it under the terms of the GNU Lesser General Public License as published by
 * // the Free Software Foundation, either version 3 of the License, or
 * // (at your option) any later version.
 * // 
 * // This program is distributed in the hope that it will be useful,
 * // but WITHOUT ANY WARRANTY; without even the implied warranty of
 * // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * // GNU Lesser General Public License for more details.
 * // 
 * // You should have received a copy of the GNU Lesser General Public License
 * // along with this program.  If not, see http://www.gnu.org/licenses/.
 * //
 * packet TC_Packet
 * {
 *     int scid;          // Spacecraft ID
 *     int max_fdu_len;   // Maximum Frame Data Unit Length
 *     int max_frame_len; // Maximum Frame Length
 *     int rx_fifo_len;   // Receive FIFO Length
 *     int vcid;          // Virtual Channel ID
 *     bool crc_flag;     // CRC Enabled
 *     bool seg_hdr_flag; // Segmentation Header Flag
 *     bool bypass;       // Bypass Flag
 *     bool ctrl_cmd;     // Control Command Flag
 *     uint8_t util_buffer[]; // Buffer Data
 * }
 * </pre>
 */
class TC_Packet : public ::omnetpp::cPacket
{
  protected:
    int scid = 0;
    int max_fdu_len = 0;
    int max_frame_len = 0;
    int rx_fifo_len = 0;
    int vcid = 0;
    bool crc_flag = false;
    bool seg_hdr_flag = false;
    bool bypass = false;
    bool ctrl_cmd = false;
    uint8_t *util_buffer = nullptr;
    size_t util_buffer_arraysize = 0;

  private:
    void copy(const TC_Packet& other);

  protected:
    bool operator==(const TC_Packet&) = delete;

  public:
    TC_Packet(const char *name=nullptr, short kind=0);
    TC_Packet(const TC_Packet& other);
    virtual ~TC_Packet();
    TC_Packet& operator=(const TC_Packet& other);
    virtual TC_Packet *dup() const override {return new TC_Packet(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getScid() const;
    virtual void setScid(int scid);

    virtual int getMax_fdu_len() const;
    virtual void setMax_fdu_len(int max_fdu_len);

    virtual int getMax_frame_len() const;
    virtual void setMax_frame_len(int max_frame_len);

    virtual int getRx_fifo_len() const;
    virtual void setRx_fifo_len(int rx_fifo_len);

    virtual int getVcid() const;
    virtual void setVcid(int vcid);

    virtual bool getCrc_flag() const;
    virtual void setCrc_flag(bool crc_flag);

    virtual bool getSeg_hdr_flag() const;
    virtual void setSeg_hdr_flag(bool seg_hdr_flag);

    virtual bool getBypass() const;
    virtual void setBypass(bool bypass);

    virtual bool getCtrl_cmd() const;
    virtual void setCtrl_cmd(bool ctrl_cmd);

    virtual void setUtil_bufferArraySize(size_t size);
    virtual size_t getUtil_bufferArraySize() const;
    virtual uint8_t getUtil_buffer(size_t k) const;
    virtual uint8_t* getUtil_buffer(){return util_buffer;};
    virtual void setUtil_buffer(size_t k, uint8_t util_buffer);
    virtual void insertUtil_buffer(size_t k, uint8_t util_buffer);
    [[deprecated]] void insertUtil_buffer(uint8_t util_buffer) {appendUtil_buffer(util_buffer);}
    virtual void appendUtil_buffer(uint8_t util_buffer);
    virtual void eraseUtil_buffer(size_t k);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const TC_Packet& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, TC_Packet& obj) {obj.parsimUnpack(b);}



namespace omnetpp {

template<> inline TC_Packet *fromAnyPtr(any_ptr ptr) { return check_and_cast<TC_Packet*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __TCPACKET_M_H

